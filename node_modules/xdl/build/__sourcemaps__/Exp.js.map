{"version":3,"sources":["Exp.js"],"names":["async","root","let","exp","pkg","await","ProjectUtils","readConfigJsonAsync","entryPoint","main","determineEntryPointAsync","templateSpec","projectRoot","packageManager","workflow","initialConfig","Logger","notifications","info","code","NotificationCode","PROGRESS","MessageCode","EXTRACTING","pacote","extract","cache","path","join","UserSettings","dotExpoHomeDirectory","CUSTOMIZING","appFile","appJson","merge","readAsync","expo","writeAsync","packageFile","packageJson","private","name","version","description","tags","repository","_resolved","_integrity","_from","fs","move","error","data","readFileSync","appendFileSync","unlinkSync","initGitRepo","global","Detach","detachAsync","installDependencies","extractTemplateApp","process","platform","Binaries","isXcodeInstalled","warn","insideGit","spawnAsync","cwd","debug","e","stdio","resolve","recentExpsJsonFile","recentExps","filter","x","unshift","slice","saveRecentExpRootAsync","icon","iconUrl","pathOrUrl","resolvedPath","existsSync","readableRoot","makePathReadable","expInfoSafeAsync","publicUrl","user","UserManager","ensureLoggedInAsync","Error","username","ThirdParty","getManifest","slug","sdkVersion","iosBundleIdentifier","ios","bundleIdentifier","androidPackage","android","package","args","remoteUsername","remotePackageName","remoteFullPackageName","getThirdPartyInfoAsync","configName","configFilenameAsync","getPublishInfoAsync","results","Promise","all","map","filteredResults","result","recentValidExpsAsync","recipient","url_","allowUnauthed","Api","callMethodAsync","sendAsync","ps","ProjectSettings","randomness","urlRandomness","resetProjectRandomnessAsync","getProjectRandomnessAsync","UrlUtils","someRandomness","setAsync","rimraf","sync","clearXDLCacheAsync","default","ENTRY_POINT_PLATFORM_TEMPLATE_STRING","getHomeDir","env","pth","homedir","substr","length"],"mappings":"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","file":"../Exp.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport merge from 'lodash/merge';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport JsonFile from '@expo/json-file';\nimport rimraf from 'rimraf';\nimport pacote from 'pacote';\n\nimport * as Analytics from './Analytics';\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Detach from './detach/Detach';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport Logger from './Logger';\nimport NotificationCode from './NotificationCode';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as ThirdParty from './ThirdParty';\nimport UserManager from './User';\nimport * as UrlUtils from './UrlUtils';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\nimport * as ProjectSettings from './ProjectSettings';\nimport MessageCode from './MessageCode';\n\n// FIXME(perry) eliminate usage of this template\nexport const ENTRY_POINT_PLATFORM_TEMPLATE_STRING = 'PLATFORM_GOES_HERE';\n\nexport { default as convertProjectAsync } from './project/Convert';\n\nexport async function determineEntryPointAsync(root: string) {\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(root);\n\n  // entryPoint is relative to the packager root and main is relative\n  // to the project root. So if your rn-cli.config.js points to a different\n  // root than the project root, these can be different. Most of the time\n  // you should use main.\n  let entryPoint = pkg.main || 'index.js';\n  if (exp && exp.entryPoint) {\n    entryPoint = exp.entryPoint;\n  }\n\n  return entryPoint;\n}\n\nexport async function extractTemplateApp(\n  templateSpec: string | object,\n  projectRoot: string,\n  packageManager: 'yarn' | 'npm' = 'npm',\n  workflow: 'managed' | 'advanced' = 'managed',\n  initialConfig = {}\n) {\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.EXTRACTING);\n  await pacote.extract(templateSpec, projectRoot, {\n    cache: path.join(UserSettings.dotExpoHomeDirectory(), 'template-cache'),\n  });\n\n  // Update files\n  Logger.notifications.info({ code: NotificationCode.PROGRESS }, MessageCode.CUSTOMIZING);\n\n  let appFile = new JsonFile(path.join(projectRoot, 'app.json'));\n  let appJson = merge(await appFile.readAsync(), { expo: initialConfig });\n  await appFile.writeAsync(appJson);\n\n  let packageFile = new JsonFile(path.join(projectRoot, 'package.json'));\n  let packageJson = await packageFile.readAsync();\n  // Adding `private` stops npm from complaining about missing `name` and `version` fields.\n  // We don't add a `name` field because it also exists in `app.json`.\n  packageJson = { ...packageJson, private: true };\n  // These are metadata fields related to the template package, let's remove them from the package.json.\n  delete packageJson.name;\n  delete packageJson.version;\n  delete packageJson.description;\n  delete packageJson.tags;\n  delete packageJson.repository;\n  // pacote adds these, but we don't want them in the package.json of the project.\n  delete packageJson._resolved;\n  delete packageJson._integrity;\n  delete packageJson._from;\n  await packageFile.writeAsync(packageJson);\n\n  // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.\n  // See: https://github.com/npm/npm/issues/1862\n  try {\n    await fs.move(path.join(projectRoot, 'gitignore'), path.join(projectRoot, '.gitignore'));\n  } catch (error) {\n    // Append, if there's already a `.gitignore` file there\n    if (error.code === 'EEXIST') {\n      let data = fs.readFileSync(path.join(projectRoot, 'gitignore'));\n      fs.appendFileSync(path.join(projectRoot, '.gitignore'), data);\n      fs.unlinkSync(path.join(projectRoot, 'gitignore'));\n    } else if (error.code === 'ENOENT') {\n      // `gitignore` doesn't exist, move on.\n    } else {\n      throw error;\n    }\n  }\n\n  await initGitRepo(projectRoot);\n\n  if (workflow === 'advanced') {\n    Logger.global.info('Installing ExpoKit...');\n    await Detach.detachAsync(projectRoot, { packageManager });\n  } else {\n    await installDependencies(projectRoot, packageManager);\n  }\n\n  return projectRoot;\n}\n\nasync function initGitRepo(root: string) {\n  if (process.platform === 'darwin' && !Binaries.isXcodeInstalled()) {\n    Logger.global.warn(`Unable to initialize git repo. \\`git\\` not installed.`);\n    return;\n  }\n\n  // let's see if we're in a git tree\n  let insideGit = true;\n  try {\n    await spawnAsync('git', ['rev-parse', '--is-inside-work-tree'], {\n      cwd: root,\n    });\n    Logger.global.debug('New project is already inside of a git repo, skipping git init.');\n  } catch (e) {\n    insideGit = false;\n  }\n\n  if (!insideGit) {\n    try {\n      await spawnAsync('git', ['init'], { cwd: root });\n      Logger.global.info('Initialized a git repository.');\n    } catch (e) {\n      // no-op -- this is just a convenience and we don't care if it fails\n    }\n  }\n}\n\nasync function installDependencies(projectRoot, packageManager) {\n  Logger.global.info('Installing dependencies...');\n\n  if (packageManager === 'yarn') {\n    await spawnAsync('yarnpkg', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  } else {\n    await spawnAsync('npm', ['install'], {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  }\n}\n\nexport async function saveRecentExpRootAsync(root: string) {\n  root = path.resolve(root);\n\n  // Write the recent Exps JSON file\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n  // Filter out copies of this so we don't get dupes in this list\n  recentExps = recentExps.filter(function(x) {\n    return x !== root;\n  });\n  recentExps.unshift(root);\n  return await recentExpsJsonFile.writeAsync(recentExps.slice(0, 100));\n}\n\nfunction getHomeDir(): string {\n  return process.env[process.platform === 'win32' ? 'USERPROFILE' : 'HOME'] || '';\n}\n\nfunction makePathReadable(pth) {\n  let homedir = getHomeDir();\n  if (pth.substr(0, homedir.length) === homedir) {\n    return `~${pth.substr(homedir.length)}`;\n  } else {\n    return pth;\n  }\n}\n\nexport async function expInfoSafeAsync(root: string) {\n  try {\n    let {\n      exp: { name, description, icon, iconUrl },\n    } = await ProjectUtils.readConfigJsonAsync(root);\n    let pathOrUrl =\n      icon || iconUrl || 'https://d3lwq5rlu14cro.cloudfront.net/ExponentEmptyManifest_192.png';\n    let resolvedPath = path.resolve(root, pathOrUrl);\n    if (fs.existsSync(resolvedPath)) {\n      icon = `file://${resolvedPath}`;\n    } else {\n      icon = pathOrUrl; // Assume already a URL\n    }\n\n    return {\n      readableRoot: makePathReadable(root),\n      root,\n      name,\n      description,\n      icon,\n    };\n  } catch (e) {\n    return null;\n  }\n}\n\ntype PublishInfo = {\n  args: {\n    username: string,\n    remoteUsername: string,\n    remotePackageName: string,\n    remoteFullPackageName: string,\n    iosBundleIdentifier: ?string,\n    androidPackage: ?string,\n  },\n};\n\nexport async function getThirdPartyInfoAsync(publicUrl: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const exp = await ThirdParty.getManifest(publicUrl);\n  const { slug, sdkVersion, version } = exp;\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${publicUrl}`);\n  }\n\n  if (!slug) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n  return {\n    args: {\n      username,\n      remoteUsername: username,\n      remotePackageName: slug,\n      remoteFullPackageName: `@${username}/${slug}`,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\n// TODO: remove / change, no longer publishInfo, this is just used for signing\nexport async function getPublishInfoAsync(root: string): Promise<PublishInfo> {\n  const user = await UserManager.ensureLoggedInAsync();\n\n  if (!user) {\n    throw new Error('Attempted to login in offline mode. This is a bug.');\n  }\n\n  const { username } = user;\n\n  const { exp } = await ProjectUtils.readConfigJsonAsync(root);\n\n  const name = exp.slug;\n  const { version, sdkVersion } = exp;\n\n  const configName = await ProjectUtils.configFilenameAsync(root);\n\n  if (!sdkVersion) {\n    throw new Error(`sdkVersion is missing from ${configName}`);\n  }\n\n  if (!name) {\n    // slug is made programmatically for app.json\n    throw new Error(`slug field is missing from exp.json.`);\n  }\n\n  if (!version) {\n    throw new Error(`Can't get version of package.`);\n  }\n\n  const remotePackageName = name;\n  const remoteUsername = username;\n  const remoteFullPackageName = `@${remoteUsername}/${remotePackageName}`;\n  const iosBundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n  const androidPackage = exp.android ? exp.android.package : null;\n\n  return {\n    args: {\n      username,\n      remoteUsername,\n      remotePackageName,\n      remoteFullPackageName,\n      sdkVersion,\n      iosBundleIdentifier,\n      androidPackage,\n    },\n  };\n}\n\nexport async function recentValidExpsAsync() {\n  let recentExpsJsonFile = UserSettings.recentExpsJsonFile();\n  let recentExps = await recentExpsJsonFile.readAsync();\n\n  let results = await Promise.all(recentExps.map(expInfoSafeAsync));\n  let filteredResults = results.filter(result => result);\n  return filteredResults;\n}\n\nexport async function sendAsync(recipient: string, url_: string, allowUnauthed: boolean = true) {\n  let result = await Api.callMethodAsync('send', [recipient, url_, allowUnauthed]);\n  return result;\n}\n\n// TODO: figure out where these functions should live\nexport async function getProjectRandomnessAsync(projectRoot: string) {\n  let ps = await ProjectSettings.readAsync(projectRoot);\n  let randomness = ps.urlRandomness;\n  if (randomness) {\n    return randomness;\n  } else {\n    return resetProjectRandomnessAsync(projectRoot);\n  }\n}\n\nexport async function resetProjectRandomnessAsync(projectRoot: string) {\n  let randomness = UrlUtils.someRandomness();\n  ProjectSettings.setAsync(projectRoot, { urlRandomness: randomness });\n  return randomness;\n}\n\nexport async function clearXDLCacheAsync() {\n  let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'ios-simulator-app-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'android-apk-cache'));\n  rimraf.sync(path.join(dotExpoHomeDirectory, 'starter-app-cache'));\n  Logger.notifications.info(`Cleared cache`);\n}\n"],"sourceRoot":"/xdl@53.1.2/src"}